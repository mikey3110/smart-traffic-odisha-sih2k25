version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smart-traffic-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-traffic_management}
      POSTGRES_USER: ${POSTGRES_USER:-traffic_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-traffic_user} -d ${POSTGRES_DB:-traffic_management}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smart-traffic-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smart-traffic-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smart-traffic-network

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: smart-traffic-backend-prod
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-traffic_management}
      - POSTGRES_USER=${POSTGRES_USER:-traffic_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_logs_prod:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart-traffic-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ML API
  ml-api:
    build:
      context: ./src/ml_engine
      dockerfile: Dockerfile
    container_name: smart-traffic-ml-prod
    ports:
      - "8001:8001"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-traffic_management}
      - POSTGRES_USER=${POSTGRES_USER:-traffic_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ml_models_prod:/app/models
      - ml_logs_prod:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart-traffic-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Computer Vision Service
  cv-service:
    build:
      context: ./src/computer_vision
      dockerfile: Dockerfile
    container_name: smart-traffic-cv-prod
    ports:
      - "5001:5001"
    environment:
      - BACKEND_URL=http://backend:8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - backend
      - redis
    volumes:
      - cv_models_prod:/app/models
      - cv_logs_prod:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/cv/streams"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart-traffic-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Frontend
  frontend:
    build:
      context: ./src/frontend/smart-traffic-ui
      dockerfile: Dockerfile
    container_name: smart-traffic-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    depends_on:
      - backend
    volumes:
      - frontend_logs_prod:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart-traffic-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smart-traffic-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - ml-api
      - cv-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart-traffic-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: smart-traffic-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - smart-traffic-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: smart-traffic-grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - smart-traffic-network

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: smart-traffic-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - smart-traffic-network

  # Backup Service
  backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    container_name: smart-traffic-backup-prod
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-traffic_management}
      - POSTGRES_USER=${POSTGRES_USER:-traffic_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./backups:/backups
      - postgres_data_prod:/var/lib/postgresql/data
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - smart-traffic-network

volumes:
  postgres_data_prod:
  redis_data_prod:
  backend_logs_prod:
  ml_models_prod:
  ml_logs_prod:
  cv_models_prod:
  cv_logs_prod:
  frontend_logs_prod:
  nginx_logs_prod:
  prometheus_data_prod:
  grafana_data_prod:
  elasticsearch_data_prod:

networks:
  smart-traffic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16