name: Smart Traffic Management System - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: smart-traffic-odisha-sih2k25

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest pytest-cov
        pip install -r src/backend/requirements.txt
        pip install -r src/ml_engine/requirements.txt
        pip install -r src/computer_vision/requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd src/frontend/smart-traffic-ui
        npm ci
        
    - name: Python code formatting check
      run: |
        black --check src/
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: TypeScript/JavaScript linting
      run: |
        cd src/frontend/smart-traffic-ui
        npm run lint
        
    - name: Frontend build test
      run: |
        cd src/frontend/smart-traffic-ui
        npm run build

  # Job 2: Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: traffic_management
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/backend/requirements.txt
        pip install -r src/ml_engine/requirements.txt
        pip install -r src/computer_vision/requirements.txt
        pip install pytest pytest-cov locust
        
    - name: Run backend tests
      run: |
        cd src/backend
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Run ML tests
      run: |
        cd src/ml_engine
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Run CV tests
      run: |
        cd src/computer_vision
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./src/backend/coverage.xml,./src/ml_engine/coverage.xml,./src/computer_vision/coverage.xml

  # Job 3: Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd src/frontend/smart-traffic-ui
        npm ci
        
    - name: Run unit tests
      run: |
        cd src/frontend/smart-traffic-ui
        npm run test:coverage
        
    - name: Run E2E tests
      run: |
        cd src/frontend/smart-traffic-ui
        npm run test:e2e
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: src/frontend/smart-traffic-ui/coverage/

  # Job 4: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: traffic_management
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/backend/requirements.txt
        pip install -r src/ml_engine/requirements.txt
        pip install -r src/computer_vision/requirements.txt
        pip install pytest locust
        
    - name: Start services
      run: |
        # Start backend
        cd src/backend
        python main.py &
        BACKEND_PID=$!
        echo $BACKEND_PID > backend.pid
        
        # Start ML API
        cd ../ml_engine
        python api/ml_api.py &
        ML_PID=$!
        echo $ML_PID > ml.pid
        
        # Start CV service
        cd ../computer_vision
        python demo_integration.py &
        CV_PID=$!
        echo $CV_PID > cv.pid
        
        # Wait for services to start
        sleep 30
        
    - name: Run integration tests
      run: |
        python tests/test_suite.py
        
    - name: Run load tests
      run: |
        python tests/load_test.py medium_load
        
    - name: Stop services
      if: always()
      run: |
        # Kill background processes
        if [ -f src/backend/backend.pid ]; then
          kill $(cat src/backend/backend.pid) || true
        fi
        if [ -f src/ml_engine/ml.pid ]; then
          kill $(cat src/ml_engine/ml.pid) || true
        fi
        if [ -f src/computer_vision/cv.pid ]; then
          kill $(cat src/computer_vision/cv.pid) || true
        fi

  # Job 5: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 6: Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [backend, frontend, ml-engine, cv-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 7: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your staging deployment commands here
        # kubectl apply -f k8s/staging/
        
    - name: Run smoke tests
      run: |
        echo "ðŸ§ª Running smoke tests on staging..."
        # Add smoke test commands here
        # python tests/smoke_test.py --env=staging

  # Job 8: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add your production deployment commands here
        # kubectl apply -f k8s/production/
        
    - name: Run production smoke tests
      run: |
        echo "ðŸ§ª Running smoke tests on production..."
        # Add production smoke test commands here
        # python tests/smoke_test.py --env=production

  # Job 9: Performance Monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up monitoring
      run: |
        echo "ðŸ“Š Setting up performance monitoring..."
        # Add monitoring setup commands here
        
    - name: Run performance tests
      run: |
        echo "âš¡ Running performance tests..."
        # Add performance test commands here
        # python tests/performance_test.py --env=production