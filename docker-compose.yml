version: '3.8'

services:
  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: traffic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: traffic-postgres
    environment:
      POSTGRES_DB: traffic_management
      POSTGRES_USER: traffic_user
      POSTGRES_PASSWORD: traffic_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traffic_user -d traffic_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: traffic-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://traffic_user:traffic_password@postgres:5432/traffic_management
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Optimizer
  ml-optimizer:
    build:
      context: .
      dockerfile: docker/ml-optimizer.Dockerfile
    container_name: traffic-ml-optimizer
    ports:
      - "8001:8001"
    environment:
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models/traffic_optimizer.pkl
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SUMO Simulation
  sumo-simulation:
    build:
      context: .
      dockerfile: docker/sumo-simulation.Dockerfile
    container_name: traffic-sumo-simulation
    ports:
      - "8002:8002"
    environment:
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379
      - SUMO_BINARY=/usr/local/bin/sumo
    volumes:
      - ./simulation/sumo_integration:/app/sumo_integration
      - ./logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: traffic-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api
      - VITE_WS_URL=ws://localhost:8000/ws
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: traffic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: traffic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: traffic-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # System Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: docker/orchestrator.Dockerfile
    container_name: traffic-orchestrator
    environment:
      - CONFIG_PATH=/app/config/system_config.yaml
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - backend
      - ml-optimizer
      - sumo-simulation
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Flow Manager
  data-flow-manager:
    build:
      context: .
      dockerfile: docker/data-flow-manager.Dockerfile
    container_name: traffic-data-flow-manager
    environment:
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
      - ML_OPTIMIZER_URL=http://ml-optimizer:8001
      - SUMO_SIMULATION_URL=http://sumo-simulation:8002
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - backend
      - ml-optimizer
      - sumo-simulation
    restart: unless-stopped

  # Monitoring System
  monitoring:
    build:
      context: .
      dockerfile: docker/monitoring.Dockerfile
    container_name: traffic-monitoring
    ports:
      - "9091:9091"
    environment:
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - redis
      - prometheus
    restart: unless-stopped

  # Log aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: traffic-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: traffic-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/traffic
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: traffic-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Backup service
  backup:
    build:
      context: .
      dockerfile: docker/backup.Dockerfile
    container_name: traffic-backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=traffic_management
      - POSTGRES_USER=traffic_user
      - POSTGRES_PASSWORD=traffic_password
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - ./backups:/app/backups
      - ./data:/app/data
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  default:
    name: traffic-management-network
