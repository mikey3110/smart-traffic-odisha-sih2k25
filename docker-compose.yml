version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smart-traffic-postgres
    environment:
      POSTGRES_DB: traffic_management
      POSTGRES_USER: traffic_user
      POSTGRES_PASSWORD: traffic_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traffic_user -d traffic_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smart-traffic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: smart-traffic-backend
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=traffic_management
      - POSTGRES_USER=traffic_user
      - POSTGRES_PASSWORD=traffic_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src/backend:/app
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML API
  ml-api:
    build:
      context: ./src/ml_engine
      dockerfile: Dockerfile
    container_name: smart-traffic-ml
    ports:
      - "8001:8001"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=traffic_management
      - POSTGRES_USER=traffic_user
      - POSTGRES_PASSWORD=traffic_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src/ml_engine:/app
      - ml_models:/app/models
      - ml_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Computer Vision Service
  cv-service:
    build:
      context: ./src/computer_vision
      dockerfile: Dockerfile
    container_name: smart-traffic-cv
    ports:
      - "5001:5001"
    environment:
      - BACKEND_URL=http://backend:8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - backend
      - redis
    volumes:
      - ./src/computer_vision:/app
      - cv_models:/app/models
      - cv_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/cv/streams"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./src/frontend/smart-traffic-ui
      dockerfile: Dockerfile
    container_name: smart-traffic-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./src/frontend/smart-traffic-ui:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SUMO Simulation (Optional)
  sumo:
    build:
      context: ./sumo
      dockerfile: Dockerfile
    container_name: smart-traffic-sumo
    ports:
      - "8080:8080"  # SUMO GUI
      - "8813:8813"  # TraCI
    environment:
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    volumes:
      - ./sumo:/app
      - sumo_data:/app/data
    profiles:
      - simulation

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  ml_models:
  ml_logs:
  cv_models:
  cv_logs:
  sumo_data:

networks:
  default:
    name: smart-traffic-network