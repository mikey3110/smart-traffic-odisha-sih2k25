version: '3.8'

services:
  # Smart Traffic Management Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: traffic-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - API_DEBUG=false
      - API_RELOAD=false
      - DB_URL=postgresql://traffic_user:traffic_password@postgres:5432/traffic_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - LOG_LEVEL=INFO
      - LOG_ENABLE_FILE=true
      - LOG_FILE_PATH=logs/traffic_api.log
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - traffic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: traffic-postgres
    environment:
      - POSTGRES_DB=traffic_db
      - POSTGRES_USER=traffic_user
      - POSTGRES_PASSWORD=traffic_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - traffic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traffic_user -d traffic_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: traffic-redis
    command: redis-server --requirepass redis_password --appendonly yes
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - traffic-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: traffic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - traffic-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: traffic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - traffic-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: traffic-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - traffic-network

  # Development Backend (optional)
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: traffic-backend-dev
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - API_DEBUG=true
      - API_RELOAD=true
      - DB_URL=sqlite:///./traffic_dev.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=DEBUG
      - LOG_ENABLE_CONSOLE=true
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - traffic-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  traffic-network:
    driver: bridge