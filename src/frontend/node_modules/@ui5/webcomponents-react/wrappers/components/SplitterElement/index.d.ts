import type { CSSProperties, ReactNode } from 'react';
import type { CommonProps } from '../../types/index.js';
export interface SplitterElementPropTypes extends CommonProps {
    /**
     * Defines whether a resizer element is displayed.
     *
     * If the next `SplitterElement` has the prop `resizable={false}`, no resizer element will be shown after this
     * `SplitterElement`. The resizer element is only shown when all siblings of the resizer are resizable.
     * Default value of resizable is `true`.
     */
    resizable?: boolean;
    /**
     * Defines the initial size of the `SplitterElement`.
     *
     * __Note:__ In order to preserve the intended design, at least one `SplitterElement` should have a dynamic `size`.
     *
     * @default `"auto"`
     */
    size?: CSSProperties['width'] | CSSProperties['height'];
    /**
     * Defines the minimum size of the `SplitterElement`. The resizer element stops when the minimum size is reached.
     *
     * @default `0`
     */
    minSize?: number;
    /**
     * Defines the content which is shown inside the `SplitterElement`.
     */
    children?: ReactNode | ReactNode[];
}
/**
 * The `SplitterElement` holds the component of the content area. Allowed size values are of the type css property width or
 * height according to the orientation of the `SplitterLayout`. If `size` isn't passed to the element, the width or
 * height of the content area will be calculated automatically according to the size of the given `SplitterLayout`.
 * The `minSize` defines the minimum width or height of the area and is set to 0 when no minimum size is given, so the
 * content can be completely collapsed.
 */
declare const SplitterElement: import("react").ForwardRefExoticComponent<SplitterElementPropTypes & import("react").RefAttributes<HTMLDivElement>>;
export { SplitterElement };
