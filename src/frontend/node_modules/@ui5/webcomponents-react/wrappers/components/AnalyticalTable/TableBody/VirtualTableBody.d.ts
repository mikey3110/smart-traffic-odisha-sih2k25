import type { Virtualizer } from '@tanstack/react-virtual';
import type { MutableRefObject, RefObject } from 'react';
import type { AnalyticalTablePropTypes, ClassNames, DivWithCustomScrollProp, ReactVirtualScrollToMethods, TableInstance, TriggerScrollState } from '../types/index.js';
interface VirtualTableBodyProps {
    classes: ClassNames;
    prepareRow: TableInstance['prepareRow'];
    rows: TableInstance['rows'];
    isTreeTable?: AnalyticalTablePropTypes['isTreeTable'];
    internalRowHeight: number;
    alternateRowColor?: AnalyticalTablePropTypes['alternateRowColor'];
    visibleColumns: Record<string, unknown>[];
    renderRowSubComponent: AnalyticalTablePropTypes['renderRowSubComponent'];
    popInRowHeight: number;
    isRtl: boolean;
    markNavigatedRow?: AnalyticalTablePropTypes['markNavigatedRow'];
    alwaysShowSubComponent: boolean;
    dispatch?: (e: {
        type: string;
        payload?: Record<string, unknown>;
    }) => void;
    subComponentsHeight?: Record<string, {
        rowId: string;
        subComponentHeight?: number;
    }>;
    columnVirtualizer: Virtualizer<DivWithCustomScrollProp, Element>;
    manualGroupBy?: boolean;
    subRowsKey: string;
    scrollContainerRef?: MutableRefObject<HTMLDivElement>;
    triggerScroll?: TriggerScrollState;
    scrollToRef: RefObject<ReactVirtualScrollToMethods>;
    rowVirtualizer: Virtualizer<DivWithCustomScrollProp, HTMLElement>;
}
export declare const VirtualTableBody: (props: VirtualTableBodyProps) => import("react/jsx-runtime").JSX.Element;
export {};
