import { makeRenderer } from 'react-table';
import { AnalyticalTablePopinDisplay } from '../../../../enums/AnalyticalTablePopinDisplay.js';
import { FlexBoxAlignItems } from '../../../../enums/FlexBoxAlignItems.js';
import { FlexBoxDirection } from '../../../../enums/FlexBoxDirection.js';
import { FlexBoxWrap } from '../../../../enums/FlexBoxWrap.js';
import { Text } from '../../../../webComponents/Text/index.js';
import { FlexBox } from '../../../FlexBox/index.js';
import { RenderColumnTypes } from '../../types/index.js';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export const PopIn = instance => {
  const {
    state,
    contentToRender,
    cell,
    row,
    internalRowHeight,
    webComponentsReactProperties: {
      classes: classNames
    }
  } = instance;
  return /*#__PURE__*/_jsxs(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classNames.popInContainer,
    children: [/*#__PURE__*/_jsx(FlexBox, {
      alignItems: contentToRender !== RenderColumnTypes.Grouped && contentToRender !== RenderColumnTypes.Expandable ? FlexBoxAlignItems.Start : FlexBoxAlignItems.Center,
      wrap: FlexBoxWrap.NoWrap,
      className: classNames.defaultCell,
      style: {
        height: internalRowHeight
      },
      children: cell.render(contentToRender)
    }), contentToRender !== RenderColumnTypes.Grouped && state.popInColumns?.map(item => {
      const {
        popinDisplay,
        id,
        column
      } = item;
      const popInInstanceProps = row.allCells.find(cell => cell.column.id === item.id);
      const renderHeader = () => {
        if (column.PopInHeader) {
          return typeof column.PopInHeader === 'function' ? column.PopInHeader({
            ...instance,
            ...popInInstanceProps
          }) : column.PopInHeader;
        }
        return typeof column.Header === 'function' ? makeRenderer({
          ...instance,
          ...popInInstanceProps
        }, column)(column.Header) : column.Header;
      };
      const renderCell = () => {
        if (column?.Cell) {
          const cell = column.Cell;
          if (typeof cell === 'string') {
            return /*#__PURE__*/_jsx(Text, {
              maxLines: 1,
              title: cell,
              children: cell
            });
          }
          return makeRenderer({
            ...instance,
            ...popInInstanceProps,
            isPopIn: true
          }, column)(column.Cell);
        }
        return popInInstanceProps?.value ? /*#__PURE__*/_jsx(Text, {
          maxLines: 1,
          title: popInInstanceProps.value,
          children: popInInstanceProps.value
        }) : null;
      };
      return /*#__PURE__*/_jsxs(FlexBox, {
        direction: popinDisplay === AnalyticalTablePopinDisplay.Inline ? FlexBoxDirection.Row : FlexBoxDirection.Column,
        className: popinDisplay === AnalyticalTablePopinDisplay.Inline ? classNames.gap : undefined,
        children: [popinDisplay !== AnalyticalTablePopinDisplay.WithoutHeader && column?.Header && /*#__PURE__*/_jsxs("div", {
          className: classNames.popInHeader,
          "data-component-name": "AnalyticalTablePopinHeaderContainer",
          children: [renderHeader(), ":"]
        }), /*#__PURE__*/_jsx("div", {
          style: {
            height: internalRowHeight
          },
          children: popInInstanceProps && renderCell()
        })]
      }, id);
    })]
  });
};
PopIn.displayName = 'PopIn';